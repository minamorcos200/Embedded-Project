#include "stdio.h"
#include "stdint.h"
#include "string.h" 
#include "stdlib.h"
#include "stdbool.h"
#include "math.h"
#include "D:/Mina/Faculty of Engineering/6. Junior level - Semester 6/CSE 211 Introduction to Embedded Systems/12. Project/tm4c123gh6pm.h"
#include "tm4c123.h"
      		char y[8][80]; 
					double LAT, LONG;
	void portA_init(void)
	{
	SYSCTL_RCGCGPIO_R |=0x01;
		while ( (SYSCTL_PRGPIO_R & 0x01) ==0);
	GPIO_PORTA_LOCK_R= 0x4C4F434B;
	GPIO_PORTA_CR_R	= 0xE0;	
	GPIO_PORTA_AFSEL_R =0x03 ;
	GPIO_PORTA_PCTL_R =0x11;
	GPIO_PORTA_AMSEL_R = 0;
	GPIO_PORTA_DIR_R =0xE0;
	GPIO_PORTA_DEN_R =0xE3;
	GPIO_PORTA_PUR_R = 0;
	
	}
	
	void portD_init(void)
	{
	SYSCTL_RCGCGPIO_R |=0x08;
		

	GPIO_PORTD_AFSEL_R =0xC0 ;
	GPIO_PORTD_PCTL_R =0x01100000;
	GPIO_PORTD_AMSEL_R = 0;
	GPIO_PORTD_DIR_R =0;
	GPIO_PORTD_DEN_R =0xC0;
	
	}
	
	void portB_init_(void)
	{
	SYSCTL_RCGCGPIO_R |=0x02;
		while ( (SYSCTL_PRGPIO_R & 0x02) ==0);
	GPIO_PORTB_LOCK_R= 0x4C4F434B;
	GPIO_PORTB_CR_R	= 0xFF;	
	GPIO_PORTB_AFSEL_R= 0; 
	GPIO_PORTB_PCTL_R =0;
	GPIO_PORTB_AMSEL_R = 0;
	GPIO_PORTB_DIR_R =0xFF;
	GPIO_PORTB_DEN_R =0xFF;
	GPIO_PORTB_PUR_R = 0;
	}
	
	void portF_init(void){

	SYSCTL_RCGCGPIO_R |=0x20;
		while ( (SYSCTL_PRGPIO_R & 0x20) ==0);
	GPIO_PORTF_LOCK_R= 0x4C4F434B;
	GPIO_PORTF_CR_R	= 0x1F;	
	GPIO_PORTF_AFSEL_R = 0;
	GPIO_PORTF_PCTL_R =0;
	GPIO_PORTF_AMSEL_R = 0;
	GPIO_PORTF_DIR_R =0x0E;
	GPIO_PORTF_DEN_R =0x1F;
	GPIO_PORTF_PUR_R = 0x11;
	}
		void UART_Init(void) {
SYSCTL_RCGCUART_R |= 0X00000004; // UART2 active 
SYSCTL_RCGCGPIO_R |= 0X00000008 ; // activate port D
while ( (SYSCTL_PRGPIO_R & 0x08) ==0);
GPIO_PORTD_LOCK_R= 0x4C4F434B;
GPIO_PORTD_CR_R	= 0xC0;	
UART2_CTL_R &= ~0X00000004 ; 
UART2_IBRD_R = 104 ;
UART2_FBRD_R = 11 ;
UART2_LCRH_R = 0X00000070 ; 
UART2_CTL_R = 0X00000004 ;
GPIO_PORTD_AFSEL_R |= 0XC0 ; 
GPIO_PORTD_DEN_R |= 0XC0 ;
GPIO_PORTD_PCTL_R = (GPIO_PORTA_PCTL_R&0X00FFFFFF)+0X11000000;
GPIO_PORTD_AMSEL_R &= ~0XC0 ; 
GPIO_PORTD_PUR_R = 0;
			
}
/* Mili seconds delay function */
void delay_ms(int n)
{
 int i,j;
 for(i=0;i<n;i++)
 for(j=0;j<3180;j++)
 {}
}
/* Micro seconds delay function */
void delay_us(int n)
{
 int i,j;
 for(i=0;i<n;i++)
 for(j=0;j<3;j++)
 {}
 
}
void delayLCD(int n){
    int i , j ;
	for( i=0;i<n;i++) {
		for(j=0;j<3180;j++){
		}
	}
}
void dataLCD(unsigned char data) {
	GPIO_PORTA_DATA_R |= 0x80  ; //Enable RS
	GPIO_PORTA_DATA_R &= ~(0x60); // disable Enable , RW
	GPIO_PORTB_DATA_R = data;
	GPIO_PORTA_DATA_R |= 0x40; // Enable on
		delayLCD(10) ;
	GPIO_PORTA_DATA_R &= ~(0x60) ; // Enable off
		delayLCD(10) ;
}	
void LCD_cmd(unsigned char cmd) {

GPIO_PORTA_DATA_R &= ~(0xE0) ; // disable RS , Enable , RW
GPIO_PORTB_DATA_R = cmd ;
GPIO_PORTA_DATA_R |= 0x40 ; // Enable on
delayLCD(10) ;
GPIO_PORTA_DATA_R &= ~(0xE0) ; // Enable off
delayLCD(10) ;
	//PA7 -- > RS
//PA6 -- > E
//PA5 -- > RW
//PDn --> Dn


}

void LCDcalling(int dist){
  int UnitDigit = dist % 10;
		int TensDigit = (dist - UnitDigit)/10;
	int HundredDigit=(int) Abs(number/100%10);
        LCD_cmd(0X30);  //wake up call
        //udelay(40);
        delayLCD(10);
        LCD_cmd(0X38);  //8-bit bus mode, 2 line display mode, 5x8 dots display mode
        delayLCD(40);
        LCD_cmd(0X01);  //clear display
        delayLCD(40);
        //udelay(40);
        LCD_cmd(0X0F);  //diplay is on
        delayLCD(40);
        LCD_cmd(0X80);  //First line

				 dataLCD();
				 delayLCD(500);
				 dataLCD(TensDigit);
         delayLCD(100);
       
}


		char UART_InChar(void) { 
if ((UART0_FR_R&0X0010) != 0 ){} ;
return(UART0_DR_R&0XFF);
}			
 int char_to_int (char c ){
return c - '0';
}
double Angle_Conv(int degrees, double minutes){
	minutes = minutes * 100/60;
	return minutes + degrees;
}
   void ParseNMEAline(){
int m=0;
		  int x,z; 

	for (int i=0 ; i<8 ; i++ ){
		for( int j=0;j<100 ;j++){
			 char character=UART_InChar(); // input function
			if (m!=0) {
				j=1;
				m=0;
			}
			if (character!='$'|| j==0){
				y[i][j]=character;
				}
			else if (character=='$'&& j!=0 ){
				y[i+1][0]= '$';
				j=80 ;
				m=1;
				}
			}
		}
	
	for (int i=0 ; i<8 ; i++ ){
		if ( y[i][3]== 'G' && y[i][4]=='G' && y[i][5]=='A'){ 
				int comma = 0;
			for (int j = 0; j < 80; j++){
				if (y[i][j] == ','){
					comma = comma + 1;
					if (comma == 2){
						
						int  LAT_Coordinates = char_to_int(y[i][j + 1]);
						LAT_Coordinates = 10 * LAT_Coordinates;
						int   LAT_Units = char_to_int(y[i][j + 2]);
						double  LAT_degree = LAT_Coordinates + LAT_Units;
						LAT_Coordinates = char_to_int(y[i][j + 3]);
						LAT_Coordinates = 10 * LAT_Coordinates;
						LAT_Units = char_to_int(y[i][j + 4]);
					double  LAT_Minutes = LAT_Coordinates + LAT_Units;
						int p = 0;
						for (int k = j + 6; k < 50; k++) {
							if (y[i][k] != ',') {
								uint16_t dec = char_to_int(y[i][k]);
								double Ten_pow = pow(10, p = p - 1);
								LAT_Minutes += (dec*Ten_pow);
							}
							else break;
						}
					}
					if (comma == 4){
						int LONG_Coordinates = char_to_int(y[i][j + 1]);
						int LONG_Hundreds = 100 * LONG_Coordinates;
						LONG_Coordinates += char_to_int(y[i][j + 2]);
						int LONG_Tens = 10 * LONG_Coordinates;
						int  LONG_Units = char_to_int(y[i][j + 3]);
							double LONG_Degree = LONG_Hundreds + LONG_Tens + LONG_Units;
						LONG_Coordinates = char_to_int(y[i][j + 4]);
						int LONG_Minutes_Tens = 10 * LONG_Coordinates;
						int LONG_Minutes_Units = char_to_int(y[i][j + 5]);
						double	LONG_Minutes = LONG_Minutes_Tens + LONG_Minutes_Units;
						int p = 0;
						for (int k = j + 7; k < 50; k++) {
							if (y[i][k] != ',') {
								uint16_t dec = char_to_int(y[i][k]);
								double Ten_pow = pow(10, p = p - 1);
								LONG_Minutes += (dec*Ten_pow);
							}
							else break;
						}
					}
					if (comma == 6){
						if (y[i][j + 1] == 'A')
						{
							 LAT = Angle_Conv( LAT_Degree, LAT_Minutes); // from DMS to decimal
							 LONG = Angle_Conv( LONG_Degree, LONG_Minutes);

							}
						}
					}
				}
		}
	}
}
	float degreesToRadians(double degrees){
   return (degrees * 22/(180*7));
}
float distanceBetweenEarthCoordinates(latit_1,longi_1,latit_2,longi_2){
    int earthRadiusKm = 6371;
	double dlat= degreesToRadians(latit_2-latit_1);
	double dlon= degreesToRadians(longi_2-longi_1);
	double lat_1 = degreesToRadians(latit_1);
	double lat_2 = degreesToRadians(latit_2);
 	double a = sin(dlat/2)* sin(dlat/2) + 
            sin(dlon/2)* sin(dlon/2) * cos(lat_1) * cos(lat_2) ;
    double c = 2 * atan2(sqrt(a), sqrt(1-a));
	double initial_distance = (float) earthRadiusKm * c * 1000; 
	return initial_distance ;
	}		
		
int main(){
SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2) );
	portA_init();
	portB_init_();
	portD_init();
	portF_init();
	UART_Init();
	
double lat1, lon1, lat2, lon2;
ParseNMEALine();
	lat1 = lAT;
	lon1 = LONG;
	ParseNMEALine ();
	lat2 = LAT;
	lon2 = LONG;
int ini_dist= (int) distanceBetweenEarthCoordinates(lat1, lon1, lat2, lon2);
	lon1 = lon2;
	lat1 = lat2;
int distance = 0;
distance= ini_dist + distance;
	LCDcalling(distance);	
lat1 = lat2 ;
    lon1 = lon2 ;
while( distance <= 100){
ParseNMEALine();
	lat2 = LAT;
	lon2 = LONG;
ini_dist= (int) distanceBetweenEarthCoordinates(lat1, lon1, lat2, lon2);
	lon1 = lon2;
	lat1 = lat2;
distance = ini_dist + distance;
LCDcalling(distance);	
}
return 0;
}